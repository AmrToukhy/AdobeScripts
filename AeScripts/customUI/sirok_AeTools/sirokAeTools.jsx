/*    ##sirokAeTools  update : 2013/1/24  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'aftereffects'{	function main(thisObj)	{		var sirokToolsData = new Object();		sirokToolsData.scriptName = "Sirok Pad";		sirokToolsData.version = "1.0";				sirokToolsData.strSettings = "...";		sirokToolsData.strSettingsTip = "Settings";		sirokToolsData.strHelp = "?";		sirokToolsData.strHelpTip = "Help";		sirokToolsData.settingsTitle = sirokToolsData.scriptName + " Settings";		sirokToolsData.settingsScripts = "Scripts (listed in order of appearance):"		sirokToolsData.strSelScriptsFolder = "Select the scripts folder to use";		sirokToolsData.strAboutTitle = "About " + sirokToolsData.scriptName;		sirokToolsData.strAbout = sirokToolsData.scriptName + " " + sirokToolsData.version;		sirokToolsData.strRefreshPanel = "Please close and then reopen Launch Pad to refresh the panel's script buttons.";		sirokToolsData.strErrCantLaunchScript = "Could not launch script '%s' because it no longer exists on disk."		sirokToolsData.strErrMinAE90 = "This script requires Adobe After Effects CS4 or later.";				sirokToolsData.btnSize = 32;						// sirokTools_buildUI()		// Function for creating the user interface		function sirokTools_buildUI(thisObj)		{			var pal = (thisObj instanceof Panel) ? thisObj : new Window("palette", sirokToolsData.scriptName, [200, 200, 600, 500], {resizeable: true});						if (pal != null)			{				pal.bounds.width = (sirokToolsData.btnSize+5)*10 + 5;				pal.bounds.height = (sirokToolsData.btnSize+5)*1 + 5;				pal.scriptBtns = null;				sirokTools_rebuildButtons(pal);								pal.onResize = sirokTools_doResizePanel;				pal.onResizing = sirokTools_doResizePanel;			}			return pal;		}						// sirokTools_filterJSXFiles()		// Function for filtering .jsx files that are not the current file. Used with the Folder.getFiles() function.		function sirokTools_filterJSXFiles(file)		{			return ((file.name.match(/.jsx(bin)?$/) != null) && (file.name != (new File($.fileName)).name));		}						// sirokTools_rebuildButtons()		// Function for creating/recreating the button layout		function sirokTools_rebuildButtons(palObj)		{			var topEdge = 4;			var leftEdge = 4;			var btnSize = sirokToolsData.btnSize;			var btnIconFile, defBtnIconFile;						// Remove the existing buttons (all of them)			if (palObj.btnGroup != undefined)			{				while (palObj.btnGroup.children.length > 0)					palObj.btnGroup.remove(0);				palObj.remove(0);			}						// Add buttons for scripts			//alert("Folder.current = "+sirokToolsData.thisScriptsFolder.toString());			defBtnIconFile = new File(sirokToolsData.thisScriptsFolder.fsName + "/scripts/Launch Pad_jsx-icon.png");			if (!defBtnIconFile.exists)				defBtnIconFile = null;						palObj.scriptBtns = undefined;			palObj.scriptBtns = new Array();						// Place controls in a group container to get the panel background love			palObj.btnGroup = palObj.add("group", [0, 0, palObj.bounds.width, palObj.bounds.height]);						for (var i=0; i<sirokToolsData.scripts.length; i++)			{				// If there's a corresponding .png file, use it as an iconbutton instead of a regular text button				btnIconFile = new File(File(sirokToolsData.scripts[i]).fsName.replace(/.jsx(bin)?$/, ".png"));				if (btnIconFile.exists)					palObj.scriptBtns[i] = palObj.btnGroup.add("iconbutton", [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize], btnIconFile, {style:"toolbutton"});				else if (defBtnIconFile != null)					palObj.scriptBtns[i] = palObj.btnGroup.add("iconbutton", [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize], defBtnIconFile, {style:"toolbutton"});				else					palObj.scriptBtns[i] = palObj.btnGroup.add("button", [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize], sirokToolsData.scripts[i].name.replace(/.jsx$/, "").replace(/%20/g, " "));				palObj.scriptBtns[i].scriptFile = sirokToolsData.scripts[i].fsName;		// Store file name with button (sneaky that JavaScript is)				palObj.scriptBtns[i].helpTip = File(sirokToolsData.scripts[i]).name.replace(/.jsx(bin)?$/, "").replace(/%20/g, " ") + "\n\n(" + sirokToolsData.scripts[i].fsName + ")";				palObj.scriptBtns[i].onClick = function()				{					var scriptFile = new File(this.scriptFile);					if (scriptFile.exists)					{						scriptFile.open("r");						var scriptContent = scriptFile.read();						scriptFile.close();						eval(scriptContent);						//aftereffects.executeScript(scriptContent);						//$.evalFile(scriptFile);					}					else						alert(sirokToolsData.strErrCantLaunchScript.replace(/%s/, this.scriptFile.fsName), sirokToolsData.scriptName);				}								leftEdge += (btnSize + 5);			}						// Add the settings and help buttons			var settingsBtnIconFile = new File(sirokToolsData.thisScriptsFolder.fsName + "/Launch Pad_settings.png");			if (settingsBtnIconFile.exists)				palObj.settingsBtn = palObj.btnGroup.add("iconbutton", [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize/2], settingsBtnIconFile, {style:"toolbutton"});			else				palObj.settingsBtn = palObj.btnGroup.add("button", [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize/2], sirokToolsData.strSettings);			palObj.settingsBtn.helpTip = sirokToolsData.strSettingsTip;			palObj.settingsBtn.onClick = function ()			{				// Get the scripts in the selected scripts folder				var scriptsFolder = Folder.selectDialog(sirokToolsData.strSelScriptsFolder, Folder(sirokToolsData.scriptsFolder));				if ((scriptsFolder != null) && scriptsFolder.exists)				{					sirokToolsData.scriptsFolder = scriptsFolder;					// Get all scripts in the selected folder, but not this one, cuz that would be weird :-)					sirokToolsData.scripts = scriptsFolder.getFiles(sirokTools_filterJSXFiles);										// Remember the scripts folder for the next session					app.settings.saveSetting("Adobe", "sirokTools_scriptsFolder", sirokToolsData.scriptsFolder.fsName);										// Refresh the palette					sirokTools_rebuildButtons(sirokToolsPal);					sirokTools_doResizePanel();										// Refreshing the panel's buttons while it's open is not working as expected right now, so it's safer to reopen the panel/palette.					//alert(sirokToolsData.strRefreshPanel, sirokToolsData.strAboutTitle);				}			}						var helpBtnIconFile = new File(sirokToolsData.thisScriptsFolder.fsName + "/Launch Pad_help.png");			if (helpBtnIconFile.exists)				palObj.helpBtn = palObj.btnGroup.add("iconbutton", [leftEdge, topEdge+btnSize/2, leftEdge+btnSize, topEdge+btnSize], helpBtnIconFile, {style:"toolbutton"});			else				palObj.helpBtn = palObj.btnGroup.add("button", [leftEdge, topEdge+btnSize/2, leftEdge+btnSize, topEdge+btnSize], sirokToolsData.strHelp);			palObj.helpBtn.helpTip = sirokToolsData.strHelpTip;			palObj.helpBtn.onClick = function () {alert(sirokToolsData.strAbout, sirokToolsData.strAboutTitle);}		}						// sirokTools_doResizePanel()		// Callback function for laying out the buttons in the panel		function sirokTools_doResizePanel()		{			var btnSize = sirokToolsData.btnSize;			var btnOffset = btnSize + 5;			var maxRightEdge = sirokToolsPal.size.width - btnSize;			var leftEdge = 5;			var topEdge = 5;						// Reset the background group container's bounds			sirokToolsPal.btnGroup.bounds = [0, 0, sirokToolsPal.size.width, sirokToolsPal.size.height];						// Reset each button's layer bounds			for (var i=0; i<sirokToolsData.scripts.length; i++)			{				sirokToolsPal.scriptBtns[i].bounds = [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize];								leftEdge += btnOffset;								// Create a new row if no more columns available in the current row of buttons				if (leftEdge > maxRightEdge)				{					leftEdge = 5;					topEdge += btnOffset;				}			}						// The settings and help buttons go into the next "slot"			sirokToolsPal.settingsBtn.bounds = [leftEdge, topEdge, leftEdge+btnSize, topEdge+btnSize/2];			sirokToolsPal.helpBtn.bounds = [leftEdge, topEdge+btnSize/2, leftEdge+btnSize, topEdge+btnSize];		}						// main:		// 				if (parseFloat(app.version) < 9)		{			alert(sirokToolsData.strErrMinAE90, sirokToolsData.scriptName);			return;		}		else		{			// Keep track of this script's folder so we know where to find the icons used by the script			sirokToolsData.thisScriptsFolder = new Folder((new File($.fileName)).path);						// Use the last defined script folder, or ask the user for one (if not previously defined)			sirokToolsData.scripts = new Array();			if (app.settings.haveSetting("Adobe", "sirokTools_scriptsFolder"))			{				sirokToolsData.scriptsFolder = new Folder(app.settings.getSetting("Adobe", "sirokTools_scriptsFolder").toString());				if ((sirokToolsData.scriptsFolder != null) && sirokToolsData.scriptsFolder.exists)					sirokToolsData.scripts = sirokToolsData.scriptsFolder.getFiles(sirokTools_filterJSXFiles);			}			else			{				sirokToolsData.scriptsFolder = Folder.selectDialog(sirokToolsData.strSelScriptsFolder, new Folder(Folder.startup.fsName + "/Scripts/"));				if ((sirokToolsData.scriptsFolder != null) && sirokToolsData.scriptsFolder.exists)				{					sirokToolsData.scripts = sirokToolsData.scriptsFolder.getFiles(sirokTools_filterJSXFiles);										// Remember the scripts folder for the next session					app.settings.saveSetting("Adobe", "sirokTools_scriptsFolder", sirokToolsData.scriptsFolder.fsName);				}			}						// Build and show the UI			var sirokToolsPal = sirokTools_buildUI(thisObj);			if (sirokToolsPal != null)			{				if (sirokToolsPal instanceof Window)				{					// Center the palette					sirokToolsPal.center();										// Show the UI					sirokToolsPal.show();				}				else					sirokTools_doResizePanel();			}		}	}			main(this);}