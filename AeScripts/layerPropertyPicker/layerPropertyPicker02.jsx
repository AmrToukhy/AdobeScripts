/*  layerPropertyPicker.jsx ver 1.0  アニメーショントランスフォーム情報の抜き出し  #親子関係が有る場合、親レイヤーから開始位置です    update : 2012/11/23  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'aftereffects'/* layerPropertyPicker.jsx */function layerPropertyPicker(){    debugLog(debugMessage[0] + "layerPropertyPicker.jsx");//処理スタート  //global  //active.composition  layerPropertyPicker.comp = app.project.activeItem;  //selected.layers  layerPropertyPicker.layers = app.project.activeItem.selectedLayers;  //notselected  if(layerPropertyPicker.layers.length < 0) return alert("書き出しに必要なレイヤーを選択してください");    /* write property method */  layerPropertyPicker.writeProp = function(layObj, propName)  {    //コンポジションのフレームレート、    //対象のレイヤープロパティ、    //ワークエリアの情報を宣言    fps = 1 / frameRate;    tmpObj = layObj.property(propName);    $.writeln("\nPropartyName : " + propName);        var frmCnt=0;    for(i = workAreaIn; i < workAreaOut; i+=fps)    {      val = tmpObj.valueAtTime(i, false);                  $.writeln(val);      frmCnt+=1;      fNum = String("frame\ " + frmCnt);      pVal = String(val);      layerPropertyPicker.fileObj.writeln(fNum+ ", " + propName +" : " + uneval(val));      //layerPropertyPicker.fileObj.writeln();    };    };  /*write property method fin*/  /*write CompoInfo Method*/  layerPropertyPicker.writeCompoInfo = function(){      selComp  = layerPropertyPicker.comp;      compName = selComp.name;      compWidth = selComp.width;      compHeight = selComp.height;      frameRate = selComp.frameRate;      workAreaIn  = selComp.workAreaStart;      workAreaOut = selComp.workAreaDuration;                  layerPropertyPicker.fileObj.writeln("compName : " + compName +", compWidth : " + compWidth + ", compHeight : " + compHeight +", frameRate : \n" + frameRate + ", workAreaIn : " + workAreaIn + ", workAreaOut : " + workAreaOut );      $.writeln("compName : " + compName +", compWidth : " + compWidth + ", compHeight : " + compHeight +", frameRate : \n" + frameRate + ", workAreaIn : " + workAreaIn + ", workAreaOut : " + workAreaOut );            layerPropertyPicker.fileObj.writeln("\====================================");            return;  }    /*write CompoInfo Method fin*/  //fileObj  layerPropertyPicker.fileObj = File.saveDialog("保存するテキストファイル名を入れて下さい","*.txt");    if (!layerPropertyPicker.fileObj) return $.writeln(debugMessage[3]);  var flag = layerPropertyPicker.fileObj.open("w","txt","");  if (!flag) return $.writeln(debugMessage[3]);    //コンポ情報の読み込み  layerPropertyPicker.writeCompoInfo();    //レイヤー情報の取得  var selectLayTotal = layerPropertyPicker.layers.length;  for (l=0; l < selectLayTotal; l++)  {    selectLayObj = layerPropertyPicker.layers[l];            //親レイヤーが無い場合はNull    //if(selectLayObj.parent.name != null) parentLayerName = selectLayObj.parent.name;        $.writeln(debugMessage[2]);    $.writeln("LayerName : " + selectLayObj.name);    //テキストファイル    layerPropertyPicker.fileObj.writeln("\nPointName : " + selectLayObj.name);    layerPropertyPicker.fileObj.writeln("----------------------");        layerPropertyPicker.writeProp(selectLayObj, "position");    layerPropertyPicker.fileObj.writeln("----------------------");        //layerPropertyPicker.writeProp(selectLayObj, "anchorPoint");    layerPropertyPicker.writeProp(selectLayObj, "scale");    layerPropertyPicker.fileObj.writeln("----------------------");        layerPropertyPicker.writeProp(selectLayObj, "rotation");    //layerPropertyPicker.writeProp(selectLayObj, "opacity");    layerPropertyPicker.fileObj.writeln("----------------------");      }  layerPropertyPicker.fileObj.close();  layerPropertyPicker.fileObj.writeln("\====================================");  //通知  alert(compName + "の情報を保存しました");  $.writeln(compName + "の情報を保存しました");  $.writeln(debugMessage[1])  return $.writeln(debugMessage[1]);}//debugvar debugMessage = [  "INFO : スクリプト開始 ",  "INFO : スクリプト終了 ",  "/========================================",  "INFO : 何らかの理由でファイルが作成できませんでした。"];//mainlayerPropertyPicker();function debugLog(obj){  $.writeln(obj);}function alertObj(obj) {    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);}