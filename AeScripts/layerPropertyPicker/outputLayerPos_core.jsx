/*  outputLayerPos.jsx ver   アニメーショントランスフォーム情報の抜き出し  #親子関係が有る場合、親レイヤーから開始位置です    update : 2012/11/23  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'aftereffects'/* layerPropertyPicker.jsx */function layerPropertyPicker(){    log(debugMessage[0] + "layerPropertyPicker.jsx");//処理スタート  //global  //active.composition  layerPropertyPicker.comp = app.project.activeItem;  //selected.layers  layerPropertyPicker.layers = app.project.activeItem.selectedLayers;  //notselected  if(layerPropertyPicker.layers.length < 0) return alert("書き出しに必要なレイヤーを選択してください");    /*write property method fin*/  /*write CompoInfo Method*/  layerPropertyPicker.writeCompoInfo = function(){      selComp  = layerPropertyPicker.comp;      compName = selComp.name;      compWidth = selComp.width;      compHeight = selComp.height;      frameRate = selComp.frameRate;      workAreaIn  = selComp.workAreaStart;      workAreaOut = selComp.workAreaDuration;      return;  }  /*write CompoInfo Method fin*/    var userOutPutPath = Folder.selectDialog("保存するフォルダを選択");    if (!userOutPutPath) return alert("保存をキャンセルします。");    log(userOutPutPath);  checkPath(userOutPutPath);  userOutPutPath = userOutPutPath.fsName;    //コンポ情報の読み込み  layerPropertyPicker.writeCompoInfo();  /*direcgtionCheck*/  if(compName=="BaseAvatar_BONE") direction = "south";  if(compName=="BaseAvatar_BONE_NORTH") direction = "north";  if(compName=="BaseAvatar_BONE_EAST") direction = "east";  if(compName=="BaseAvatar_BONE_WEST") direction = "west";  //alert(direction);  fps = 1 / frameRate;  var frmCnt=0;    frameData = {};  frameData['direciton'] = '\"'+direction+'\"';    for(i = workAreaIn; i < workAreaOut; i+=fps){            fNum = String("frame:" + i);      //log(fNum);      var selectLayTotal = layerPropertyPicker.layers.length;              region = {};      for (l=0; l < selectLayTotal; l++)      {                selectLayObj = layerPropertyPicker.layers[l];        layPropObj = {};               sellayName = selectLayObj.name;        writeProperty(selectLayObj,i,'position',layPropObj);        writeProperty(selectLayObj,i,'rotation',layPropObj);        //point[sellayName] = layPropObj;        //log(array2json(layPropObj));                region[sellayName] = array2json(layPropObj);      }      //log(array2json(region));              frameData['skeleton'] = array2json(region);  }   log(array2json(frameData));    publishJson(userOutPutPath, array2json(frameData));    //通知  //alert(compName + "の情報を保存しました");  log(compName + "の情報を保存しました");  return log(debugMessage[1]);}function decodeJson(str){    var rtn;    eval("rtn="+str);    return rtn;}//レイヤー情報の取得/* write property method */function writeProperty(layObj,i,prop,layPropObj){    tmpObj = layObj.property(prop);  val = tmpObj.valueAtTime(i, false);  if(prop == 'position'){     //layPropObj.push("x");    //layPropObj.push(val[0]);    //layPropObj.push("y");    //layPropObj.push(val[1]);    layPropObj['x'] = Number(val[0]);    layPropObj['y'] = Number(-val[1]);  }  else if(prop == 'scale'){    //val.splice(2,2);    //layPropObj.push(val);  }  else if(prop == 'rotation'){    //layPropObj.push("rotation");    //layPropObj.push(val);    layPropObj['rotation'] = Number(val);    //layPropObj.push(prop);    //layPropObj.push(val);  }  return String(layPropObj);}function publishJson (path, pubItemObj){  folderName = String(path +"\/json\/");  folderObj = new Folder(folderName);  checkPath(folderName);  filePath = String(folderName + app.project.activeItem.name +".json");  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    fileObj.writeln(pubItemObj);    fileObj.close();  }  return 0;}//checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ファイル保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ファイル保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}function array2json(arr) {    var parts = [];    var is_list = (arr instanceof Array);     for(var key in arr) {    	var value = arr[key];        if(value instanceof Object) {            if(is_list) parts.push(array2json(value));            else parts[key] = array2json(value);        }else {            var str = '\"' + key + '\":';            if(!is_list) str = '"' + key + '":';                        //Custom handling for multiple data types            if(value instanceof Number) str += value; //Numbers            else if(value === false) str += 'false'; //The booleans            else if(value === true) str += 'true';            else str += value;            parts.push(str);        }    }    var json = parts.join(",");        if(is_list) return '{[' + json + ']}';//Return numerical JSON    return '{' + json + '}';//Return associative JSON}//debugvar debugMessage = [  "INFO : スクリプト開始 ",  "INFO : スクリプト終了 ",  "/========================================",  "INFO : 何らかの理由でファイルが作成できませんでした。"];//デバッグログfunction log(text){    $.writeln(text);}layerPropertyPicker();function alertObj(obj) {    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);}