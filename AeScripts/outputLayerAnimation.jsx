/*  outputLayerAnimation.jsx ver   アニメーショントランスフォーム情報の抜き出し  #JSON化  #親子関係が有る場合、親レイヤーから開始位置です    update : 2012/11/23  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'aftereffects'/* layerPropertyPicker.jsx */function layerPropertyPicker(){    log(debugMessage[0] + "layerPropertyPicker.jsx");//処理スタート  //global  //active.composition  layerPropertyPicker.comp = app.project.activeItem;  //selected.layers  layerPropertyPicker.layers = app.project.activeItem.selectedLayers;  //notselected  if(layerPropertyPicker.layers.length < 0) return alert("書き出しに必要なレイヤーを選択してください");    /*write property method fin*/  /*write CompoInfo Method*/  selComp  = layerPropertyPicker.comp;  compName = selComp.name;  compWidth = selComp.width;  compHeight = selComp.height;  frameRate = selComp.frameRate;  workAreaIn  = selComp.workAreaStart;  workAreaOut = selComp.workAreaDuration;  /*write CompoInfo Method fin*/    var userOutPutPath = Folder.selectDialog("保存するフォルダを選択");    if (!userOutPutPath) return alert("保存をキャンセルします。");    log(userOutPutPath);  checkPath(userOutPutPath);  userOutPutPath = userOutPutPath.fsName;    //コンポ情報の読み込み  //layerPropertyPicker.writeCompoInfo();  /*direcgtionCheck*/  if(compName=="BaseAvatar_BONE") direction = "south";  if(compName=="BaseAvatar_BONE_NORTH") direction = "north";  if(compName=="BaseAvatar_BONE_EAST") direction = "east";  if(compName=="BaseAvatar_BONE_WEST") direction = "west";  //alert(direction);  fps = 1 / frameRate;  var frmCnt=0;//フレームカウント  frameArr = "";  var layerSetPropArr=[];  var layerPropArr = [];    for(i = workAreaIn; i <= workAreaOut; i+=fps){          var selectLayTotal = layerPropertyPicker.layers.length;            for (l=0; l < selectLayTotal; l++)      {        selectLayObj = layerPropertyPicker.layers[l];        sellayName = selectLayObj.name;        sellayName = checkLayName(sellayName);        var str = "";        var r = "";        r += "\"region\":" + '\"'+sellayName+'\",';        if(sellayName == "waist"){          str += writeProperty(selectLayObj,i,'position',layerPropArr);        }        if(sellayName == "body"){//waistの角度          str += writeProperty(selectLayObj,i,'rotation',layerPropArr);        }        else{          //str += writeProperty(selectLayObj,i,'position',layerPropArr)+',';          str += writeProperty(selectLayObj,i,'rotation',layerPropArr);        }        layerPropArr[l]= "{"+r+"\"data\":{"+str+"}}";      }      layerSetPropArr[frmCnt]= arrJoin(layerPropArr);      frmCnt += 1;  }  frameArr = arrJoin(layerSetPropArr);  log(frameArr);  publishJson(userOutPutPath, frameArr);    //通知  //alert(compName + "の情報を保存しました");  log(compName + "の情報を保存しました");  return log(debugMessage[1]);}function arrJoin(arr){    //not key(indexnum)    var ar = [];    str = "";     for(var key in arr) {    	var value = arr[key];      //log(value);      str = value;      ar.push(str);    }    json = ar.join(",");    //log(json);    //log(str);    return '[' + json + ']';}//レイヤー情報の取得/* write property method */function writeProperty(layObj,i,prop,layerPropArr){      if(layObj.name == "body" ){    val = layObj.property("ADBE Effect Parade").property("角度制御")(1).valueAtTime(i, false);    }  tmpObj = layObj.property(prop);  val = tmpObj.valueAtTime(i, false);  result = "";  if(prop == 'position'){     //layPropObj['x'] = Number(val[0]);    //layPropObj['y'] = Number(-val[1]);    result += "\"x\"\:" + Number(val[0])+',';    result += "\"y\"\:" + Number(-val[1]);    //layerPropArr.push("x");    //layerPropArr.push(val[0]);    //layerPropArr.push("y");    //layerPropArr.push(-val[1]);     }  else if(prop == 'scale'){  }  else if(prop == 'rotation'){   //layPropObj['rotation'] = Number(val);   result = "\"rotation\"\:" + Number(val);   //layerPropArr.push("rotation");   //layerPropArr.push(val);  }  return result;}function encodeJson(obj){    var arr = [];    str = "";     for(var key in obj) {    	var value = obj[key];      //log(value);      str = '\"'+key+'\":' + value;      arr.push(str);      json = arr.join(",");    }    //json = "{" +json+ "}";     //strLength = str.length;    //log(json);    //str = str.slice(strLength+1);    //log(str);    return '{' + json + '}';}function array2json(arr) {    var parts = [];    /*var saveArray  =[];    var is_list = (arr instanceof Array);     for(var key in arr) {    	var value = arr[key];        if(value instanceof '[object Object]') {            //saveArray            if(is_list) parts.push(array2json(value));            else //parts[key] = array2json(value);        }else {            var str = '\"' + key + '\":';            if(!is_list) str = '"' + key + '":';                        //Custom handling for multiple data types            if(value instanceof Number) str += value; //Numbers            else if(value === false) str += 'false'; //The booleans            else if(value === true) str += 'true';            else str += value;            parts.push(str);        }    }    var json = parts.join(",");*/    //if(is_list) return '{' + json + '},';//Return numerical JSON    for(var key in arr) {    	var value = arr[key];    }    return '{' + json + '},';//Return associative JSON}function checkLayName(regionName){  /*  *ios region*@"shadow", @"waist", @"body", @"left_upperleg", @"right_upperleg", @"left_lowerleg", @"right_lowerleg", @"left_foot", @"right_foot", @"head", @"left_upperarm", @"right_upperarm", @"left_forearm", @"right_forearm", @"left_hand", @"right_hand"  */    if (regionName.match(/waist/i)) partsName = "waist";//腰  if (regionName.match(/body/i)) partsName = "body";//身体  if (regionName.match(/head/i)) partsName = "head";//首  if (regionName.match(/l_upperarm/i)) partsName = "left_upperarm";  if (regionName.match(/l_forearm/i)) partsName = "left_forearm";  if (regionName.match(/l_hand/i)) partsName = "left_hand";  if (regionName.match(/r_upperarm/i)) partsName = "right_upperarm";  if (regionName.match(/r_forearm/i)) partsName = "right_forearm";//鼻  if (regionName.match(/r_hand/i)) partsName = "right_hand";//口  if (regionName.match(/l_upperleg/i)) partsName = "left_upperleg";//眉毛  if (regionName.match(/l_lowerleg/i)) partsName = "left_lowerleg";//チーク  if (regionName.match(/l_foot/i)) partsName = "left_foot";//チーク  if (regionName.match(/r_upperleg/i)) partsName = "right_upperleg";//しみそばかす  if (regionName.match(/r_lowerleg/i)) partsName = "right_lowerleg";//鼻  if (regionName.match(/r_foot/i)) partsName = "right_foot";//口  if (regionName.match(/shadow/i)) partsName = "shadow";//口    return partsName;}function decodeJson(str){    var rtn;    eval("rtn="+str);    return rtn;}function publishJson (path, pubItemObj){  folderName = String(path +"\/json\/");  folderObj = new Folder(folderName);  checkPath(folderName);  filePath = String(folderName + app.project.activeItem.name +".json");  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    fileObj.writeln(pubItemObj);    fileObj.close();  }  return 0;}//checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ファイル保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ファイル保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}//debugvar debugMessage = [  "INFO : スクリプト開始 ",  "INFO : スクリプト終了 ",  "/========================================",  "INFO : 何らかの理由でファイルが作成できませんでした。"];//デバッグログfunction log(text){    $.writeln(text);}layerPropertyPicker();function alertObj(obj) {    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);}