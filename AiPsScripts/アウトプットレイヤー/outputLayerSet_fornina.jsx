/*  outputLayerSet.jsx ver 0.4    for nina-projects    ##選択したレイヤーセットを別のilファイルとしてWEB(art最適)設定で書き出す。    update : 2012/12/11  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'illustrator';if (app.documents.length == 0);else main();function main(){    var appName = "Ai"; //illustrator   var userName = String(Folder.myDocuments.parent.fsName).slice(7);  var docObj = app.activeDocument; //ファイル情報取得  var docPath = docObj.path; //ファイルパス  var docName = docObj.name; //ファイル名  //var outPutPath = Folder.myDocuments.parent + "/Works/AvatarProjects/Resource/Items/";  var outPutPath = Folder.myDocuments.parent + "/Works/Pr03_AvatarProjects/Resource/Items/";  log(outPutPath);  checkPath(outPutPath);  //selectObj  var selObj = docObj.selection;  var selObjLength = selObj.length;  if(selObjLength <= 0) return false;    //すべての選択を取り下げる  for(var l = 0; l < selObjLength; l++){    selObj[l].selected = false;  }    //書き出し処理  for(var i = 0; i < selObjLength; i++){    if(!i==0) selObj[i-1].selected = false;    selObj[i].selected = true;        app.copy();        tName = String(selObj[i].name);    if(tName=="")tName = "NotTitle";    sw = selObj[i].width;    sh = selObj[i].height;        app.documents.add(DocumentColorSpace.RGB, sw, sh);    app.paste();        pastObj = app.activeDocument.selection[0];    pastObj.left= 0;    pastObj.top= 0;    pastObj.position = [0, sh];        var date = dateClass(); //現在時刻の取得    try{      publishJpg(date, outPutPath, tName, userName, appName);      publishPng(date, outPutPath, tName, userName, appName);      publishAi(date, outPutPath, tName, userName, appName);    }    catch(Error){      alert("error!");    }    //todo XML出力を作る        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);  }  alert("書き出し完了");};//現在時刻の取得function dateClass(){  dObj = new Date();  while((new Date()).getTime() < dObj.getTime() + 1000*5){ //timeOut5秒      year = dObj.getYear();      year2 = (year < 2000) ? year + 1900 : year;      month = dObj.getMonth() + 1;      day = dObj.getDate();      h = dObj.getHours();      m = dObj.getMinutes();      s = dObj.getSeconds();      ms = dObj.getMilliseconds();      dateRaw = year2+'-'+month+'-'+day+' '+h+"h"+m+"m"+s+"s"+ms+"ms";      break;  }  return dateRaw;}/* fin dateClass *///checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ログ保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ログ保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}//Xml ログ出力function publishXml (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );}//Ai ドキュメント出力function publishAi (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//PNG出力(art)function publishPng (date, path, docName, userName, appName) {  folderName = path +"/png/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName;  filePath = folderName + fileName + ".png";  fileObj = new File(filePath);    var exportOptions = new ExportOptionsPNG24();  exportOptions.antiAliasing = true;  exportOptions.transparency = true;  app.activeDocument.exportFile( fileObj, ExportType.PNG24, exportOptions);  return 0;}//JPEGOutput ドキュメント名 優先function publishJpg (date, path, docName, userName, appName) {  folderName = path +"/jpg/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date + "\_" + userName; //+ "\_" + appName  filePath = folderName + fileName + ".jpg";  fileObj = new File(filePath);    var exportOptions = getJPEGOptions();  app.activeDocument.exportFile( fileObj, ExportType.JPEG, exportOptions);  return 0;}//jpeg Optionsfunction getJPEGOptions(){  	var jpegExportOpts = new ExportOptionsJPEG();	//ExportOptionsJPEGを定義	var matteRGBColor = new RGBColor();			//マットカラーの指定RGB別	matteRGBColor.red = 255; 	matteRGBColor.green = 255; 	matteRGBColor.blue = 255;	jpegExportOpts.antiAliasing = true;			//アンチエイリアス：true,false	jpegExportOpts.artBoardClipping = true;		//アートボードサイズで？：true,false	jpegExportOpts.blurAmount = 0.0;			//ぼかし足し：0.0 to 2.0	jpegExportOpts.horizontalScale = 100.0; 		//横方向拡大縮小：100.0=100%	jpegExportOpts.matte = true;				//マット有り無し：true,false	jpegExportOpts.matteColor = matteRGBColor;	//マットの色：RGBColorで指定		jpegExportOpts.optimization = true;			//最適化する？：true,false	jpegExportOpts.qualitySetting = 100;			//画質は？：0 to 100	jpegExportOpts.saveAsHTML = false;			//HTMLも保存する？：true,false	jpegExportOpts.verticalScale = 100.0;		//縦方向拡大縮小：0.0 to 776.19	jpegExportOpts.typename = 'WEB';			//Read-only	return jpegExportOpts;					//jpegExportOptsを設定}function log(text){    //$.writeln(text);}//debugfunction alertObj(obj){    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);};