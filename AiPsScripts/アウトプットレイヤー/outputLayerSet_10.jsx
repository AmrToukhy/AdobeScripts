/*  outputLayerSet.jsx ver 1.2    for nina-projects    ##Anchor分離  ##dbとの整合性,key追加  ##Jsonをセットにした  ##EncodeJSON (東西南北)  ##選択したレイヤーセットを別のilファイルとしてWEB(art最適)設定で書き出す。    update : 2012/12/28  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'illustrator';function getCoreAnchorInfo(anchorlayer){    //alert(anchorlayer.pageItems.length);  var anchorLayLength  = anchorlayer.pageItems.length;  var obj = {};    for (i = 0; i < anchorLayLength; i++){    var tmpobj = {};    anchorName = anchorlayer.pageItems[i].name;    anchorX = anchorlayer.pageItems[i].position[0];//x    anchorY = anchorlayer.pageItems[i].position[1];//y    log("anchorName:" + anchorName + ", anchorX:" + anchorX +", anchorY:" + anchorY);    //アンカー名、座標XYを追加    tmpobj["anchor"] = String(anchorName);    tmpobj["x"] = anchorX;    tmpobj["y"] = anchorY;    obj[i] = tmpobj;  }  return obj;}function searchObjValue(obj,text){    for(var key in obj) {    log(obj[key]["anchor"]);    if(obj[key] == text) return obj[key];  }  return false;}    function main(){  /* */  var appName = "Ai"; //illustrator   var userName = String(Folder.myDocuments.parent.fsName).slice(7);  var docObj = app.activeDocument; //ファイル情報取得  var docPath = docObj.path; //ファイルパス  var docName = docObj.name; //ファイル名    var itemData ={};  //logOutput  var outPutPath = Folder.myDocuments.parent + "/Works/Pr03_AvatarProjects/Resource/Items/";  //userOutputPath  var userOutPutPath = Folder.selectDialog("保存するフォルダを選択");    if (!userOutPutPath) return alert("保存をキャンセルします。");    //selectObj  var selObj = docObj.selection;  var selObjLength = selObj.length;   if(selObjLength <= 0) return false;    var selParetName = docObj.selection[0].parent.name;  userOutPutPath = userOutPutPath + "\/" + selParetName;  log(userOutPutPath);  checkPath(outPutPath);  checkPath(userOutPutPath);    //coreAncorPos  var coreAnchorPos = {};  var allLayerLength = docObj.layers.length;  log("allLayerLength: " + allLayerLength);  for(var i = 0; i < allLayerLength ; i++){    if(docObj.layers[i].name == "CoreAnchor"){      var coreAnchorLayer = docObj.layers[i];      log(coreAnchorLayer.name);    }  }  coreAnchorInfo = getCoreAnchorInfo(coreAnchorLayer);  log(coreAnchorInfo[2]["anchor"]);    //ファッション,ファーニチャーアイテムかどうかをチェック  itemType = searchObjValue(coreAnchorInfo,"s_furniture");  return;    //すべての選択を取り下げる  for(var l = 0; l < selObjLength; l++){    selObj[l].selected = false;  }    //書き出し処理  for(var i = 0; i < selObjLength; i++){        if(!i==0) selObj[i-1].selected = false;    selObj[i].selected = true;        //ターゲットアイテムの名前を取得    tName = String(selObj[i].name);    if(tName==""){      tName = "NotTitle";      alert("名前がないグループ,もしくはアンカーが含まれていないレイヤーがあります");      return;    }    /*      category enum('head', 'backhair', 'fronthair', 'eye', 'eyebrow', 'cheek', 'spot', 'nose', 'mouth', 'clothes')      */        //選択したレイヤー内レイヤーを取得pageItems    selLayInLayLength = selObj[i].pageItems.length;    for(var l = 0; l < selLayInLayLength; l++){      pName = selObj[i].pageItems[l].name;      switch (pName){        //正面顔        case "Anchor_s_h_face":          parentName = "head";          direction = "south";          break;        //南向き        //髪        case "Anchor_s_h_hair":          parentName = "head";          direction = "south";          break;        //身体        case "Anchor_s_b":          parentName = "body";          direction = "south";          break;        //左腕        case "Anchor_s_b_arms_l_upperarm":          parentName = "left_upperarm";          direction = "south";          break;        case "Anchor_s_b_arms_l_forearm":          parentName = "left_forearm";          direction = "south";          break;        case "Anchor_s_b_arms_l_hand":          parentName = "left_hand";          direction = "south";          break;              //右腕        case "Anchor_s_b_arms_r_upperarm":          parentName = "right_upperarm";          direction = "south";          break;        case "Anchor_s_b_arms_r_forearm":          parentName = "right_forearm";          direction = "south";          break;        case "Anchor_s_b_arms_r_hand":          parentName = "right_hand";          direction = "south";          break;                  //左脚        case "Anchor_s_b_legs_l_upperleg":          parentName = "left_upperleg";          direction = "south";          break;        case "Anchor_s_b_legs_l_lowerleg":          parentName = "left_lowerleg";          direction = "south";          break;        case "Anchor_s_b_legs_l_foot":          parentName = "left_foot";          direction = "south";          break;        //右脚        case "Anchor_s_b_legs_r_upperleg":          parentName = "right_upperleg";          direction = "south";          break;        case "Anchor_s_b_legs_r_lowerleg":          parentName = "right_lowerleg";          direction = "south";          break;        case "Anchor_s_b_legs_r_foot":          parentName = "right_foot";          direction = "south";          break;                  //北向き        //後顔        case "Anchor_n_h_face":          parentName = "head";          direction = "north";          break;        //髪        case "Anchor_n_h_hair":          parentName = "head";          direction = "north";          break;        //身体        case "Anchor_n_b":          parentName = "body";          direction = "north";          break;        //左腕        case "Anchor_n_b_arms_l_upperarm":          parentName = "left_upperarm";          direction = "north";          break;        case "Anchor_n_b_arms_l_forearm":          parentName = "left_forearm";          direction = "north";          break;        case "Anchor_n_b_arms_l_hand":          parentName = "left_hand";          direction = "north";          break;              //右腕        case "Anchor_n_b_arms_r_upperarm":          parentName = "right_upperarm";          direction = "north";          break;        case "Anchor_n_b_arms_r_forearm":          parentName = "right_forearm";          direction = "north";          break;        case "Anchor_n_b_arms_r_hand":          parentName = "right_hand";          direction = "north";          break;                  //左脚        case "Anchor_n_b_legs_l_upperleg":          parentName = "left_upperleg";          direction = "north";          break;        case "Anchor_n_b_legs_l_lowerleg":          parentName = "left_lowerleg";          direction = "north";          break;        case "Anchor_n_b_legs_l_foot":          parentName = "left_foot";          direction = "north";          break;        //右脚        case "Anchor_n_b_legs_r_upperleg":          parentName = "right_upperleg";          direction = "north";          break;        case "Anchor_n_b_legs_r_lowerleg":          parentName = "right_lowerleg";          direction = "north";          break;        case "Anchor_n_b_legs_r_foot":          parentName = "right_foot";          direction = "north";          break;                //East 東向き        case "Anchor_e_h_face":          parentName = "head";          direction = "east";          break;        //南向き        //髪        case "Anchor_e_h_hair":          parentName = "head";          direction = "east";          break;        //身体        case "Anchor_e_b":          parentName = "body";          direction = "east";          break;        //左腕        case "Anchor_e_b_arms_l_upperarm":          parentName = "left_upperarm";          direction = "east";          break;        case "Anchor_e_b_arms_l_forearm":          parentName = "left_forearm";          direction = "east";          break;        case "Anchor_e_b_arms_l_hand":          parentName = "left_hand";          direction = "east";          break;              //右腕        case "Anchor_e_b_arms_r_upperarm":          parentName = "right_upperarm";          direction = "east";          break;        case "Anchor_e_b_arms_r_forearm":          parentName = "right_forearm";          direction = "east";          break;        case "Anchor_e_b_arms_r_hand":          parentName = "right_hand";          direction = "east";          break;                  //左脚        case "Anchor_e_b_legs_l_upperleg":          parentName = "left_upperleg";          direction = "east";          break;        case "Anchor_e_b_legs_l_lowerleg":          parentName = "left_lowerleg";          direction = "east";          break;        case "Anchor_e_b_legs_l_foot":          parentName = "left_foot";          direction = "east";          break;        //右脚        case "Anchor_e_b_legs_r_upperleg":          parentName = "right_upperleg";          direction = "east";          break;        case "Anchor_e_b_legs_r_lowerleg":          parentName = "right_lowerleg";          direction = "east";          break;        case "Anchor_e_b_legs_r_foot":          parentName = "right_foot";          direction = "east";          break;                  //West 西向き        //後顔        case "Anchor_w_h_face":          parentName = "head";          direction = "west";          break;        //髪        case "Anchor_w_h_hair":          parentName = "head";          direction = "west";          break;        //身体        case "Anchor_w_b":          parentName = "body";          direction = "west";          break;        //左腕        case "Anchor_w_b_arms_l_upperarm":          parentName = "left_upperarm";          direction = "west";          break;        case "Anchor_w_b_arms_l_forearm":          parentName = "left_forearm";          direction = "west";          break;        case "Anchor_w_b_arms_l_hand":          parentName = "left_hand";          direction = "west";          break;              //右腕        case "Anchor_w_b_arms_r_upperarm":          parentName = "right_upperarm";          direction = "west";          break;        case "Anchor_w_b_arms_r_forearm":          parentName = "right_forearm";          direction = "west";          break;        case "Anchor_w_b_arms_r_hand":          parentName = "right_hand";          direction = "west";          break;                  //左脚        case "Anchor_w_b_legs_l_upperleg":          parentName = "left_upperleg";          direction = "west";          break;        case "Anchor_w_b_legs_l_lowerleg":          parentName = "left_lowerleg";          direction = "west";          break;        case "Anchor_w_b_legs_l_foot":          parentName = "left_foot";          direction = "west";          break;        //右脚        case "Anchor_w_b_legs_r_upperleg":          parentName = "right_upperleg";          direction = "west";          break;        case "Anchor_w_b_legs_r_lowerleg":          parentName = "right_lowerleg";          direction = "west";          break;        case "Anchor_w_b_legs_r_foot":          parentName = "right_foot";          direction = "west";          break;                //影        case "Anchor_shadow":          parentName = "shadow";          direction = "south";          break;      }      anchorName = selObj[i].pageItems[l].name;      anchorPos =  selObj[i].pageItems[l].position;        selObj[i].pageItems[l+1].selected = true;      sw = selObj[i].pageItems[l+1].width;      sh = selObj[i].pageItems[l+1].height;      selPos = selObj[i].pageItems[l+1].position;      selObj[i].pageItems[l].selected = false;            break;    }        layerPos = "front";    category = "clothes";        //パーツの名前を振り分けver1.0    if (tName.match(/skin/i)){      partsName = "Skin";      layerPos = "front";      category = "head";        }//肌    //if (tName.match(/face/i)) partsName = "Face";//顔    //後向き耳    if (tName.match(/skin_ear/i)){      partsName = "SkinEar";      layerPos = "front";      category = "head";    }        //顔周辺    if (tName.match(/l_eye/i)){      partsName = "FaceLeftEye";      layerPos = "front";      category = "eye";    }//眉毛    if (tName.match(/r_eye/i)){      partsName = "FaceRightEye";      layerPos = "front";      category = "eye";    }//眉毛    if (tName.match(/l_eyebrow/i)){      partsName = "FaceLeftEyebrow";      layerPos = "front";      category = "eyebrow";    }    //眉毛    if (tName.match(/r_eyebrow/i)){      partsName = "FaceRightEyebrow";      layerPos = "front";      category = "eyebrow";    }//眉毛    if (tName.match(/l_cheek/i)){      partsName = "FaceLeftCheek";      layerPos = "front";      category = "cheek";    }//チーク    if (tName.match(/r_cheek/i)){      partsName = "FaceRightCheek";      layerPos = "front";      category = "cheek";    }//チーク    if (tName.match(/spot/i)){      partsName = "FaceSpot";      layerPos = "front";      category = "spot";    }    //しみそばかす    if (tName.match(/nose/i)){            partsName = "FaceNose";      layerPos = "front";      category = "nose";    }    //鼻    if (tName.match(/mouth/i)){      partsName = "FaceMouth";      layerPos = "front";      category = "mouth";    }      //口    //アイテム小カテゴリをパーツ名に    if (tName.match(/fronthair/i)){      partsName = "FrontHair";      layerPos = "front";      category = "fronthair";    }//前髪    if (tName.match(/backhair/i)){      partsName = "BackHair";            switch(direction){        case "south": layerPos = "back";        case "east": layerPos = "back";        case "north": layerPos = "front";        case "west": layerPos = "front";      }      category = "fronthair";    }//後髪    if (tName.match(/shirt/i)){      partsName = "Shirt";      layerPos = "front";      category = "clothes";    }//シャツ    if (tName.match(/skirt/i)){      partsName = "Skirt";      layerPos = "front";      category = "clothes";    }//スカート    if (tName.match(/socks/i)){      partsName = "Sock";      layerPos = "front";      category = "clothes";    }//靴下    if (tName.match(/sock/i)){      partsName = "Sock";      layerPos = "front";      category = "clothes";    }//靴下    if (tName.match(/shoe/i)) {      partsName = "Shoe";      layerPos = "front";      category = "clothes";    }//靴      //座標差検出(基準点は左下)    var itemPos = {};    itemPos.x = Number(selPos[0]-anchorPos[0]);    itemPos.y = Number(selPos[1]-anchorPos[1]);    //alert(itemPos);    //var itemLocation  = [];    itemLocation = encodeJson(itemPos);    /*:２回目のselectionは効かない    tmpSelLay = app.activeDocument.selection[0];    tmpSelLayPos = tmpSelLay.position;    sw = tmpSelLay.width;    sh = tmpSelLay.height;   */     //新規ドキュメントにコピーペースト    app.copy();    app.documents.add(DocumentColorSpace.RGB, sw, sh);    app.paste();    pastObj = app.activeDocument.selection[0];    pastObj.left= 0;    pastObj.top= 0;    pastObj.position = [0, sh];            var pubItemObj = {};        pubItemObj.direction = String(direction);    pubItemObj.layer = layerPos;    pubItemObj.region = String(parentName);    pubItemObj.location = itemLocation;//num    pubItemObj.category = category;        //pubItemObj.parts = String(partsName);        pubItemObj.resource = String(tName+".png");    var date = dateClass(); //現在時刻の取        log(encodeJson(pubItemObj));    try{            //TODO XML出力を作る      //publish userOutPutPath      //publishJson(date, userOutPutPath,tName, pubItemObj);      /*      publishPng(date, userOutPutPath, tName, userName, appName);            //publish Log      publishJson(date, outPutPath,tName, pubItemObj);      publishJpg(date, outPutPath, tName, userName, appName);      publishPng(date, outPutPath, tName, userName, appName);      publishAi(date, outPutPath, tName, userName, appName);      */    }    catch(Error){      alert("error!");    }    //log(encodeJson(pubItemObj));    itemData[i] = encodeJson(pubItemObj);    app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);  }    var items = arrJoin(itemData);  publishAllJson(userOutPutPath,items);  alert(selObjLength+"個のレイヤーを書き出しました。");};function arrJoin(arr){    //not key(indexnum)    var ar = [];    str = null;     for(var key in arr) {    	var value = arr[key];      //log(value);      str = value;      ar.push(str);    }    json = ar.join(",");    //log(json);    //log(str);    return '[' + json + ']';}//encodeJsonfunction encodeJson(Obj) {    var parts = [];    for(var key in Obj) {      var value = Obj[key];      var str = '"'+ key +'":';      if(key == "location") str += value;//Pos      else if(key=="x") str+=value;      else if(key=="y") str+=value;       else if(value === false) str += 'false';      else if(value === true) str += 'true';      else str += '"'+value+'"';      parts.push(str);      }    var json = parts.join(",");    return '{'+json+'}';}function publishJson (date, path, tName, pubItemObj) {  /*    format    [      {        "Pos":[-65.0634765625, 108.023498535156],        "Direction":"South",        "Parts":"Hair",        "Parent":"Head",        "Resource":"s_h_hair_fronthair_id1_ninachan.png"      }    ]  */  folderName = path +"/json/";  folderObj = new Folder (folderName);    checkPath(folderName);  fileName = tName; //+ "\_" + appName  filePath = folderName + fileName + ".json";  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    //fileObj.writeln(JSON.stringify(pubItemObj));    //log(encodeJson(pubItemObj));    fileObj.writeln(encodeJson(pubItemObj));    fileObj.close();  }  return 0;}function publishAllJson (path, obj){  folderName = String(path +"\/json\/");  folderObj = new Folder(folderName);  checkPath(folderName);  filePath = String(folderName +"resources.json");  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    fileObj.writeln(obj);    fileObj.close();  }  return 0;}//現在時刻の取得function dateClass(){  dObj = new Date();  while((new Date()).getTime() < dObj.getTime() + 1000*5){ //timeOut5秒      year = dObj.getYear();      year2 = (year < 2000) ? year + 1900 : year;      month = dObj.getMonth() + 1;      day = dObj.getDate();      h = dObj.getHours();      m = dObj.getMinutes();      s = dObj.getSeconds();      ms = dObj.getMilliseconds();      dateRaw = year2+'-'+month+'-'+day+' '+h+"h"+m+"m"+s+"s"+ms+"ms";      break;  }  return dateRaw;}/* fin dateClass *///checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ファイル保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ファイル保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}//Xml ログ出力function publishXml (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//Ai ドキュメント出力function publishAi (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//PNG出力(art)function publishPng (date, path, docName, userName, appName) {  folderName = path +"/png/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName;  filePath = folderName + fileName + ".png";  fileObj = new File(filePath);    var exportOptions = new ExportOptionsPNG24();  exportOptions.antiAliasing = true;  exportOptions.transparency = true;  app.activeDocument.exportFile( fileObj, ExportType.PNG24, exportOptions);  return 0;}//JPEGOutput ドキュメント名 優先function publishJpg (date, path, docName, userName, appName) {  folderName = path +"/jpg/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date + "\_" + userName; //+ "\_" + appName  filePath = folderName + fileName + ".jpg";  fileObj = new File(filePath);    var exportOptions = getJPEGOptions();  app.activeDocument.exportFile( fileObj, ExportType.JPEG, exportOptions);  return 0;}//jpeg Optionsfunction getJPEGOptions(){  	var jpegExportOpts = new ExportOptionsJPEG();	//ExportOptionsJPEGを定義	var matteRGBColor = new RGBColor();			//マットカラーの指定RGB別	matteRGBColor.red = 255; 	matteRGBColor.green = 255; 	matteRGBColor.blue = 255;	jpegExportOpts.antiAliasing = true;			//アンチエイリアス：true,false	jpegExportOpts.artBoardClipping = true;		//アートボードサイズで？：true,false	jpegExportOpts.blurAmount = 0.0;			//ぼかし足し：0.0 to 2.0	jpegExportOpts.horizontalScale = 100.0; 		//横方向拡大縮小：100.0=100%	jpegExportOpts.matte = true;				//マット有り無し：true,false	jpegExportOpts.matteColor = matteRGBColor;	//マットの色：RGBColorで指定		jpegExportOpts.optimization = true;			//最適化する？：true,false	jpegExportOpts.qualitySetting = 100;			//画質は？：0 to 100	jpegExportOpts.saveAsHTML = false;			//HTMLも保存する？：true,false	jpegExportOpts.verticalScale = 100.0;		//縦方向拡大縮小：0.0 to 776.19	jpegExportOpts.typename = 'WEB';			//Read-only	return jpegExportOpts;					//jpegExportOptsを設定}if (app.documents.length == 0);else main();//デバッグログfunction log(text){    $.writeln(text);}//オブジェクト抽出function alertObj(obj){    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);};