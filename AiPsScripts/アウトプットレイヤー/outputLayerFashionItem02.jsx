/*  outputLayerSet.jsx ver 1.2    ##SKIN    for nina-projects  for 肌(服)の書き出し    ##Anchor分離  ##dbとの整合性,key追加  ##Jsonをセットにした  ##EncodeJSON (東西南北)  ##選択したレイヤーセットを別のilファイルとしてWEB(art最適)設定で書き出す。    update : 2013/1/11  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'illustrator';function getCoreAnchorInfo(anchorlayer){    //alert(anchorlayer.pageItems.length);  var anchorLayLength  = anchorlayer.pageItems.length;  var obj = {};    for (i = 0; i < anchorLayLength; i++){    var tmpobj = {};    anchorName = anchorlayer.pageItems[i].name;    anchorX = anchorlayer.pageItems[i].position[0];//x    anchorY = anchorlayer.pageItems[i].position[1];//y    log("anchorName:" + anchorName + ", anchorX:" + anchorX +", anchorY:" + anchorY);    //アンカー名、座標XYを追加    tmpobj["anchor"] = String(anchorName);    tmpobj["x"] = anchorX;    tmpobj["y"] = anchorY;    obj[i] = tmpobj;  }  return obj;}function searchObjValue(obj,key,value){  for(var tmpkey in obj) {      if(obj[tmpkey][key] == String(value)){        log("FindVal: "+obj[tmpkey][key] );       return true;    }    log("Check: "+ obj[tmpkey][key]);  }  return false;}    function searchObjNum(obj,key,value){  for(var tmpkey in obj) {      if(obj[tmpkey][key] == String(value)){        log("FindNum: "+obj[tmpkey][key] );       return tmpkey;    }    log("Check: "+ obj[tmpkey][key]);  }  return false;}    function getSelItemObjInfo(selLayer){    var obj = {};    selLayerName = selLayer.name;    selLayerX = selLayer.position[0];//x    selLayerY = selLayer.position[1];//y    //pos,layname    obj["layername"] = String(selLayerName);    obj["x"] = selLayerX;    obj["y"] = selLayerY;    obj["width"] = selLayer.width;    obj["height"] = selLayer.height;    //log("selLayer: "+  obj["layername"], "x: "+obj["x"], "y: "+obj["y"]);    return obj;}//ファーにチャ出力function getJsonFurniture(obj){  var str = "";  var resstr = "";  //リソース名の抽出  var cnt = 1;    for(var num in obj) {      if(cnt == 1){        str+= '"category":';        str+= String('"'+obj[cnt]["category"]+'",');        str+= '"width":';        str+= String(obj[cnt]["width"]+',');        str+= '"depth":';        str+= String(obj[cnt]["depth"]+',');        str+= '"height":';        str+= String(obj[cnt]["height"]+',');        str+= '"maxstack":';        str+= String(obj[cnt]["maxstack"]+',');        str+= '"entrance":';        str+= String(obj[cnt]["entrance"]+',');        str+= '"resource":';      }          resstr+= String('"'+ obj[num]["resource"] + '",');      cnt+=1;  }  resstr = resstr.substring(0, resstr.length -1);  str += '[' + resstr + ']';  return '{'+ str + '}';}    function copyPasteNewDoc(w,h){    log("w: "+w +" h: "+ h);    app.copy();    app.documents.add(DocumentColorSpace.RGB, Math.ceil(w), Math.ceil(h));    app.paste();    return;}function checkDirection(str){  var direction = "";  //方角チェック    switch(str){      case "n" :        dNum = 0;        direction = "north";        break;      case "e" :        dNum = 1;        direction = "east";        break;      case "s" :        dNum = 2;        direction = "south";        break;      case "w" :        dNum = 3;        direction = "west";        break;    }  return direction;}function checkResion(str){        var partsregion="";    if(str.match(/eyes_type/i)){        partsregion = "head";    }        return partsregion;  }function checkLayerFrontBack(str){  var frontback = "";    switch(str){      case "front":        frontback = "front";      break;      case "back":        frontback = "back";      break;    }  return frontback;}function checkCategory(str){  var category = "";      switch(str){      case "skin":        category = "clothes";      break;      case "tops":        category = "clothes";      break;      case "head":        category = "head";      break;      case "eye":        category = "eye";      break;    }  return category;}function main(){  /* */  var appName = "Ai"; //illustrator   var userName = String(Folder.myDocuments.parent.fsName).slice(7);  var docObj = app.activeDocument; //ファイル情報取得  var docPath = docObj.path; //ファイルパス  var docName = docObj.name; //ファイル名    var itemData ={};  //logOutput  var outPutPath = Folder.myDocuments.parent + "/Works/Pr03_AvatarProjects/Resource/Items/";  //userOutputPath  var userOutPutPath = Folder.selectDialog("保存するフォルダを選択");    if (!userOutPutPath) return alert("保存をキャンセルします。");    //selectObj  var selObj = docObj.selection;  var selObjLength = selObj.length;  log("selObjLength: " +selObjLength);  if(selObjLength <= 0) return false;  checkPath(outPutPath);  //furnitureObj  var furnitureObj={};    //coreAncorPos  var coreAnchorPos = {};  var allLayerLength = docObj.layers.length;  log("allLayerLength: " + allLayerLength);  for(var i = 0; i < allLayerLength ; i++){    if(docObj.layers[i].name == "CoreAnchor"){      var coreAnchorLayer = docObj.layers[i];      log(coreAnchorLayer.name);    }  }  coreAnchorInfo = getCoreAnchorInfo(coreAnchorLayer);    //ファッション,ファーニチャーアイテムかどうかをチェック  itemTypeFlg = searchObjValue(coreAnchorInfo,"anchor","s_furniture");  if(itemTypeFlg){    itemType = "furniture"; cetegory = "furniture";  }  else {    itemType = "fashion";  }  log("itemType: " + itemType);        //すべての選択を取り下げる  for(var l = 0; l < selObjLength; l++){    selObj[l].selected = false;  }    //json  var jsonstr = "";  var itemListObj = {};    //書き出し処理  for(var i = 0; i < selObjLength; i++){     //初期化    //現在時刻    var date = dateClass();    //レイヤー選択    //TODO　シャイレイヤーを追加する    //if(!i==0) selObj[i-1].selected = false;    //selObj[i].selected = true;    //ターゲットアイテムの名前を取得    var tName = String(selObj[i].name);    if(tName==""){        tName = "NotTitle";        alert("名前がないグループ,もしくはアンカーが含まれていないレイヤーがあります");        return;    }    log("tName: "+tName);      //skin選択書き出し    var skinItems = selObj[i].pageItems;    var skinItemsLength  = selObj[i].pageItems.length;    var skinItemObj = {};    for(var m=0; m<skinItemsLength; m++){                      var skinChildItems = selObj[i].pageItems[m].pageItems;       var skinChildItemsLength  = selObj[i].pageItems[m].pageItems.length;       //alert(selObj[i].pageItems.length);              log(selObj[i].pageItems[m].name);              //previewItemsだった場合       //コピペ       var selParetName = selObj[i].pageItems[m].parent.name;       var path = userOutPutPath + "\/" + selParetName;       log(userOutPutPath);       checkPath(userOutPutPath);       if(selObj[i].pageItems[m].name == "preview"){          selObj[i].pageItems[m].selected =true;          copyPasteNewDoc(selObj[i].pageItems[m].width, selObj[i].pageItems[m].height);          pastObj = app.activeDocument.selection[0];          publishPng(date, path, selObj[i].pageItems[m].name, userName, appName);          app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);          selObj[i].pageItems[m].selected = false;          continue;       }else if(selObj[i].pageItems[m].name == "property"){ //propertyだった場合         var layerPropertyObj = {};         alert("here");         //レイヤープロパティを取得         //alert(selLayer.parent.parent.pageItems.length);         for(var o=0; o<selObj[i].pageItems[m].pageItems.length; o++){                   layerproperty = selObj[i].pageItems[m].pageItems[o];                propertyKey = String(layerproperty.name);                propertyValue = String(layerproperty.contents);                if(propertyKey == "sex"){                  switch(propertyValue){                      case "0":                        propertyValue = "male";                        break;                      case "1":                        propertyValue = "female";                        break;                      default:              //othercase                        propertyValue = "null";                        break;                  }                }                layerPropertyObj[propertyKey] = propertyValue;                log("key: "+ propertyKey + " value: "+ propertyValue);          }          continue;       }                              for(var n=0; n<skinChildItemsLength; n++){          //log(selObj[i].pageItems[m].pageItems[n].name);                    var childLayer = selObj[i].pageItems[m].pageItems[n];                    //hiddenチェック          if(childLayer.hidden){            var hidden=true;            childLayer.hidden = false;          }          childLayer.selected = true;          skinItemObj.layername = childLayer.name;          //選択アイテムの情報          var selItemInfo = {};          selItemInfo = getSelItemObjInfo(childLayer);           log(selItemInfo["layername"]);//region          log(selItemInfo["x"]);          log(selItemInfo["y"]);                    //property          //方角          var direction = checkDirection(selObj[i].pageItems[m].name.slice(0,1));          log("direction "  + direction);          partsregion = selItemInfo["layername"];          //リージョンチェック          var partsregion = checkResion(selItemInfo["layername"]);          //アンカーを探索してリージョンを修正          var ancNum = searchObjNum(coreAnchorInfo,"anchor",direction+"_"+selItemInfo["layername"]);          if(!ancNum){                            if(selItemInfo["layername"] == "ear"){                partsregion ="head";              }              ancNum = searchObjNum(coreAnchorInfo,"anchor",direction+"_"+partsregion);          }          //男女          //var sex = checkSex();          //カテゴリ          var category = checkCategory(selObj[i].parent.name);          //レイヤー前後          var frontback = checkLayerFrontBack("front");          log(coreAnchorInfo[ancNum]["x"]);          log(coreAnchorInfo[ancNum]["y"] );          locationX = -(coreAnchorInfo[ancNum]["x"] - selItemInfo["x"]);          locationY = -(coreAnchorInfo[ancNum]["y"] - selItemInfo["y"]);                    copyPasteNewDoc(selItemInfo["width"],selItemInfo["height"]);               var pastObj = app.activeDocument.selection[0];          pastObj.left= 0;          pastObj.top= 0;          pastObj.position = [0, Math.ceil(selItemInfo["height"])];                                        /*"direction": "east",         "layer": "front",         "region": "left_upperarm",         "location": {          "x": -5.53643798828125,           "y": 3.01614379882812        },         "category": "clothes",         "resource": "e_b_arms_r_upperarm_shirt_id1_sailorsuit.png"         */          var layjsonstr="";          layjsonstr += String('"direction":"'+direction+'",');          layjsonstr += String('"layer":"'+frontback+'",');          layjsonstr += String('"sex":"'+layerPropertyObj["sex"]+'",');          layjsonstr += String('"region":"'+partsregion+'",');          layjsonstr += String('"location":{"x":'+locationX+','+'"y":'+locationY+'},');          layjsonstr += String('"category":"'+category+'",');          layjsonstr += String('"resource":"'+direction+"_"+selItemInfo["layername"]+'.png"');          layjsonstr = "{" + layjsonstr + "},";          log(layjsonstr);          jsonstr += layjsonstr;                    try{                //TODO XML出力を作る          //publish userOutPutPath          //publishJson(date, userOutPutPath,tName, pubItemObj);                    publishPng(date, path, direction+"_"+selItemInfo["layername"], userName, appName);                    //publish Log          //publishJson(date, outPutPath,tName, pubItemObj);          publishJpg(date, outPutPath, direction+"_"+selItemInfo["layername"], userName, appName);          publishPng(date, outPutPath, direction+"_"+selItemInfo["layername"], userName, appName);          publishAi(date, outPutPath, direction+"_"+selItemInfo["layername"], userName, appName);                      }          catch(Error){            alert("error!");          }                                        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);                    if(hidden){            childLayer.hidden = true;            hidden = false;          }          selObj[i].pageItems[m].pageItems[n].selected = false;                 }       //selObj[i].pageItems[m].selected = false;    }    //カンマ消し    jsonstr = jsonstr.substring(0, jsonstr.length -1);    publishAllJsonText(path,'['+ jsonstr + ']');    }    /*出力情報*/    /*    var pubItemObj = {};    //furniture    //pubItemObj.direction = String(direction);    pubItemObj["category"] = String(cetegory);    //pubItemObj.layer = layerPos;    //pubItemObj.region = String(parentName);    //pubItemObj.location = itemLocation;//num    //pubItemObj.category = itemType;    //pubItemObj.parts = String(partsName);         pubItemObj["width"] = String(selItemInfo["width"]);    pubItemObj["depth"] = String(selItemInfo["depth"]);    pubItemObj["height"] = String(selItemInfo["height"]);    pubItemObj["maxstack"] = String(selItemInfo["maxstack"]);    pubItemObj["entrance"] = String(selItemInfo["entrance"]);    pubItemObj["resource"] = String(selItemInfo["layername"]+".png");       log(encodeJson(pubItemObj));    //出力    itemListObj[i]= pubItemObj;           if(itemTypeFlg) var text = getJsonFurniture(itemListObj);  else var items = arrJoin(itemData);    */  //log(text);  alert(selObjLength+"個のレイヤーを書き出しました。");};function arrJoin(arr){    //not key(indexnum)    var ar = [];    str = null;     for(var key in arr) {    	var value = arr[key];      //log(value);      str = value;      ar.push(str);    }    json = ar.join(",");    //log(json);    //log(str);    return '[' + json + ']';}//encodeJsonfunction encodeJson(Obj) {    var parts = [];    for(var key in Obj) {      var value = Obj[key];      var str = '"'+ key +'":';      if(key == "location") str += value;//Pos      else if(key=="x") str+=value;      else if(key=="y") str+=value;       else if(value === false) str += 'false';      else if(value === true) str += 'true';      else str += '"'+value+'"';      parts.push(str);      }    var json = parts.join(",");    return '{'+json+'}';}function publishJson (date, path, tName, pubItemObj) {  /*    format    [      {        "Pos":[-65.0634765625, 108.023498535156],        "Direction":"South",        "Parts":"Hair",        "Parent":"Head",        "Resource":"s_h_hair_fronthair_id1_ninachan.png"      }    ]  */  folderName = path +"/json/";  folderObj = new Folder (folderName);    checkPath(folderName);  fileName = tName; //+ "\_" + appName  filePath = folderName + fileName + ".json";  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    //fileObj.writeln(JSON.stringify(pubItemObj));    //log(encodeJson(pubItemObj));    fileObj.writeln(encodeJson(pubItemObj));    fileObj.close();  }  return 0;}function publishAllJson (path, obj){  folderName = String(path +"\/json\/");  folderObj = new Folder(folderName);  checkPath(folderName);  filePath = String(folderName +"resources.json");  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    fileObj.writeln(obj);    fileObj.close();  }  return 0;}function publishAllJsonText (path, text){    folderName = String(path +"\/json\/");  folderObj = new Folder(folderName);  checkPath(folderName);  filePath = String(folderName +"resources.json");  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    fileObj.writeln(text);    fileObj.close();  }  return 0;}//現在時刻の取得function dateClass(){  dObj = new Date();  while((new Date()).getTime() < dObj.getTime() + 1000*5){ //timeOut5秒      year = dObj.getYear();      year2 = (year < 2000) ? year + 1900 : year;      month = dObj.getMonth() + 1;      day = dObj.getDate();      h = dObj.getHours();      m = dObj.getMinutes();      s = dObj.getSeconds();      ms = dObj.getMilliseconds();      dateRaw = year2+'-'+month+'-'+day+' '+h+"h"+m+"m"+s+"s"+ms+"ms";      break;  }  return dateRaw;}/* fin dateClass *///checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ファイル保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ファイル保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}//Xml ログ出力function publishXml (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//Ai ドキュメント出力function publishAi (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//PNG出力(art)function publishPng (date, path, docName, userName, appName) {  folderName = path +"/png/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName;  filePath = folderName + fileName + ".png";  fileObj = new File(filePath);    var exportOptions = new ExportOptionsPNG24();  exportOptions.antiAliasing = true;  exportOptions.transparency = true;  exportOptions.artBoardClipping = false;    /*var png24ExportOpts = new ExportOptionsPNG24();	//ExportOptionspng24を	var matteRGBColor = new RGBColor();			//マットカラーの指定RGB別	matteRGBColor.red = 255; 	matteRGBColor.green = 255; 	matteRGBColor.blue = 255;	png24ExportOpts.antiAliasing = true;			//アンチエイリアス：true,false	png24ExportOpts.artBoardClipping = true;		//アートボードサイズで？：true,false	png24ExportOpts.horizontalScale = 100.0; 		//横方向拡大縮小：100.0=100%	png24ExportOpts.matte = false;				//マット有り無し：true,false	png24ExportOpts.matteColor = matteRGBColor;	//マットの色：RGBColorで指定		png24ExportOpts.transparency = true;			//透明効果の保持	png24ExportOpts.saveAsHTML = false;			//HTMLも保存する？：true,false	png24ExportOpts.verticalScale = 100.0;		//縦方向拡大縮小：0.0 to 776.19	png24ExportOpts.typename = 'PNG24';			//Read-only  */  app.activeDocument.exportFile( fileObj, ExportType.PNG24, exportOptions);  return 0;}//JPEGOutput ドキュメント名 優先function publishJpg (date, path, docName, userName, appName) {  folderName = path +"/jpg/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date + "\_" + userName; //+ "\_" + appName  filePath = folderName + fileName + ".jpg";  fileObj = new File(filePath);    var exportOptions = getJPEGOptions();  app.activeDocument.exportFile( fileObj, ExportType.JPEG, exportOptions);  return 0;}//jpeg Optionsfunction getJPEGOptions(){  	var jpegExportOpts = new ExportOptionsJPEG();	//ExportOptionsJPEGを定義	var matteRGBColor = new RGBColor();			//マットカラーの指定RGB別	matteRGBColor.red = 255; 	matteRGBColor.green = 255; 	matteRGBColor.blue = 255;	jpegExportOpts.antiAliasing = true;			//アンチエイリアス：true,false	jpegExportOpts.artBoardClipping = true;		//アートボードサイズで？：true,false	jpegExportOpts.blurAmount = 0.0;			//ぼかし足し：0.0 to 2.0	jpegExportOpts.horizontalScale = 100.0; 		//横方向拡大縮小：100.0=100%	jpegExportOpts.matte = true;				//マット有り無し：true,false	jpegExportOpts.matteColor = matteRGBColor;	//マットの色：RGBColorで指定		jpegExportOpts.optimization = true;			//最適化する？：true,false	jpegExportOpts.qualitySetting = 100;			//画質は？：0 to 100	jpegExportOpts.saveAsHTML = false;			//HTMLも保存する？：true,false	jpegExportOpts.verticalScale = 100.0;		//縦方向拡大縮小：0.0 to 776.19	jpegExportOpts.typename = 'WEB';			//Read-only	return jpegExportOpts;					//jpegExportOptsを設定}if (app.documents.length == 0);else main();//デバッグログfunction log(text){    $.writeln(text);}//オブジェクト抽出function alertObj(obj){    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);};