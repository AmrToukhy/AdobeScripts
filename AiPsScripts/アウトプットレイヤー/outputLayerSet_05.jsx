/*  outputLayerSet.jsx ver 0.6    for nina-projects    ##Anchor  ##選択したレイヤーセットを別のilファイルとしてWEB(art最適)設定で書き出す。    update : 2012/12/11  author : ishiyama@sirok.co.jp           http://takahiro.me  ©2012 SIROK, Inc. All Rights Reserved.   */#target 'illustrator';function main(){    /*     */  var appName = "Ai"; //illustrator   var userName = String(Folder.myDocuments.parent.fsName).slice(7);  var docObj = app.activeDocument; //ファイル情報取得  var docPath = docObj.path; //ファイルパス  var docName = docObj.name; //ファイル名  //var outPutPath = Folder.myDocuments.parent + "/Works/AvatarProjects/Resource/Items/";  var outPutPath = Folder.myDocuments.parent + "/Works/Pr03_AvatarProjects/Resource/Items/";  log(outPutPath);  checkPath(outPutPath);  //selectObj  var selObj = docObj.selection;  var selObjLength = selObj.length;  if(selObjLength <= 0) return false;    //すべての選択を取り下げる  for(var l = 0; l < selObjLength; l++){    selObj[l].selected = false;  }    //書き出し処理  for(var i = 0; i < selObjLength; i++){        if(!i==0) selObj[i-1].selected = false;    selObj[i].selected = true;        //ターゲットアイテムの名前を取得    tName = String(selObj[i].name);    if(tName==""){      tName = "NotTitle";      alert("名前がないグループがあります");      return;    }      //パーツの名前ver1.0    if (tName.match(/skin/i)) partsName = "Skin";//肌    if (tName.match(/face/i)) partsName = "Face";//顔    if (tName.match(/fronthair/i)) partsName = "FrontHair";//前髪    if (tName.match(/backhair/i)) partsName = "BackHair";//後髪    if (tName.match(/shirt/i)) partsName = "Shirt";//シャツ    if (tName.match(/skirt/i)) partsName = "Skirt";//スカート    if (tName.match(/socks/i)) partsName = "Socks";//靴下    if (tName.match(/shoe/i)) partsName = "Shoe";//靴        //選択したレイヤー内レイヤーを取得pageItems    selLayInLayLength = selObj[i].pageItems.length;            for(var l = 0; l < selLayInLayLength; l++){      pName = selObj[i].pageItems[l].name;      switch (pName){        //南向き        //髪        case "Anchor_s_h_hair":          parentName = "Head";          direction = "South";          break;        //身体        case "Anchor_s_b":          parentName = "Body";          direction = "South";          break;        //左腕        case "Anchor_s_b_arms_l_upperarm":          parentName = "LeftUpperarm";          direction = "South";          break;        case "Anchor_s_b_arms_l_forearm":          parentName = "LeftForearm";          direction = "South";          break;        case "Anchor_s_b_arms_l_hand":          parentName = "LeftHand";          direction = "South";          break;              //右腕        case "Anchor_s_b_arms_r_upperarm":          parentName = "RightUpperarm";          direction = "South";          break;        case "Anchor_s_b_arms_r_forearm":          parentName = "RightForearm";          direction = "South";          break;        case "Anchor_s_b_arms_r_hand":          parentName = "RightHand";          direction = "South";          break;                  //左脚        case "Anchor_s_b_legs_l_upperleg":          parentName = "LeftUpperleg";          direction = "South";          break;        case "Anchor_s_b_legs_l_lowerleg":          parentName = "LeftLowerleg";          direction = "South";          break;        case "Anchor_s_b_legs_l_foot":          parentName = "LeftFoot";          direction = "South";          break;        //右脚        case "Anchor_s_b_legs_r_upperleg":          parentName = "RightUpperleg";          direction = "South";          break;        case "Anchor_s_b_legs_r_lowerleg":          parentName = "RightLowerleg";          direction = "South";          break;        case "Anchor_s_b_legs_r_foot":          parentName = "RihgtFoot";          direction = "South";          break;                  //北向き      }      anchorName = selObj[i].pageItems[l].name;      anchorPos =  selObj[i].pageItems[l].position;        selObj[i].pageItems[l+1].selected = true;      sw = selObj[i].pageItems[l+1].width;      sh = selObj[i].pageItems[l+1].height;      selPos = selObj[i].pageItems[l+1].position;      selObj[i].pageItems[l].selected = false;      break;    }      //座標差検出(基準点は左下)    itemPos = [];    itemPos[0] = selPos[0]-anchorPos[0];    itemPos[1] = selPos[1]-anchorPos[1];    //alert(itemPos[0]+", "+itemPos[1]);            /*:２回目のselectionは効かない    tmpSelLay = app.activeDocument.selection[0];    tmpSelLayPos = tmpSelLay.position;    sw = tmpSelLay.width;    sh = tmpSelLay.height;   */     //新規ドキュメントにコピーペースト    app.copy();    app.documents.add(DocumentColorSpace.RGB, sw, sh);    app.paste();    pastObj = app.activeDocument.selection[0];    pastObj.left= 0;    pastObj.top= 0;    pastObj.position = [0, sh];            var pubItemObj = {};    pubItemObj['Pos'] = itemPos;    pubItemObj['Direction'] = direction;    pubItemObj['Parts'] = partsName;    pubItemObj['Parent'] = parentName;    pubItemObj['Resource'] = tName+".png";        //alertObj(pubItemObj);    var date = dateClass(); //現在時刻の取得        try{      //TODO XML出力を作る      publishJson(date, outPutPath,tName, pubItemObj);      publishJpg(date, outPutPath, tName, userName, appName);      publishPng(date, outPutPath, tName, userName, appName);      publishAi(date, outPutPath, tName, userName, appName);    }    catch(Error){      alert("error!");    }      app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);  }  alert("書き出し完了");};function publishJson (date, path, tName, pubItemObj) {  /*    [      {         "Parent":val,      "Pos":val,      "Parts":val,      "Direction":val,      "Resource":"xx.png"      }    ]    or    (      {      Pos:[-65.0634765625, 108.023498535156],      Direction:"South",      Parts:"Hair",      Parent:"Head",      Resource:"s_h_hair_fronthair_id1_ninachan.png"      }    )  */    folderName = path +"/json/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = tName; //+ "\_" + appName  filePath = folderName + fileName + ".json";  fileObj = new File(filePath);  flg = fileObj.open("w");  if (flg)  {    log(pubItemObj);    fileObj.writeln(uneval(pubItemObj));    fileObj.close();  }  return 0;}//現在時刻の取得function dateClass(){  dObj = new Date();  while((new Date()).getTime() < dObj.getTime() + 1000*5){ //timeOut5秒      year = dObj.getYear();      year2 = (year < 2000) ? year + 1900 : year;      month = dObj.getMonth() + 1;      day = dObj.getDate();      h = dObj.getHours();      m = dObj.getMinutes();      s = dObj.getSeconds();      ms = dObj.getMilliseconds();      dateRaw = year2+'-'+month+'-'+day+' '+h+"h"+m+"m"+s+"s"+ms+"ms";      break;  }  return dateRaw;}/* fin dateClass *///checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ファイル保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ファイル保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}//Xml ログ出力function publishXml (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//Ai ドキュメント出力function publishAi (date, path, docName, userName, appName) {  folderName = path +"/ai/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date; //+ "\_" + appName  filePath = folderName + fileName + ".ai";  fileObj = new File(filePath);      var saveOptions = new IllustratorSaveOptions();  saveOptions.compatibility = Compatibility.ILLUSTRATOR16;  saveOptions.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;  app.activeDocument.saveAs( fileObj, saveOptions );  return 0;}//PNG出力(art)function publishPng (date, path, docName, userName, appName) {  folderName = path +"/png/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName;  filePath = folderName + fileName + ".png";  fileObj = new File(filePath);    var exportOptions = new ExportOptionsPNG24();  exportOptions.antiAliasing = true;  exportOptions.transparency = true;  app.activeDocument.exportFile( fileObj, ExportType.PNG24, exportOptions);  return 0;}//JPEGOutput ドキュメント名 優先function publishJpg (date, path, docName, userName, appName) {  folderName = path +"/jpg/";  folderObj = new Folder (folderName);  checkPath(folderName);  fileName = docName + "\_" + date + "\_" + userName; //+ "\_" + appName  filePath = folderName + fileName + ".jpg";  fileObj = new File(filePath);    var exportOptions = getJPEGOptions();  app.activeDocument.exportFile( fileObj, ExportType.JPEG, exportOptions);  return 0;}//jpeg Optionsfunction getJPEGOptions(){  	var jpegExportOpts = new ExportOptionsJPEG();	//ExportOptionsJPEGを定義	var matteRGBColor = new RGBColor();			//マットカラーの指定RGB別	matteRGBColor.red = 255; 	matteRGBColor.green = 255; 	matteRGBColor.blue = 255;	jpegExportOpts.antiAliasing = true;			//アンチエイリアス：true,false	jpegExportOpts.artBoardClipping = true;		//アートボードサイズで？：true,false	jpegExportOpts.blurAmount = 0.0;			//ぼかし足し：0.0 to 2.0	jpegExportOpts.horizontalScale = 100.0; 		//横方向拡大縮小：100.0=100%	jpegExportOpts.matte = true;				//マット有り無し：true,false	jpegExportOpts.matteColor = matteRGBColor;	//マットの色：RGBColorで指定		jpegExportOpts.optimization = true;			//最適化する？：true,false	jpegExportOpts.qualitySetting = 100;			//画質は？：0 to 100	jpegExportOpts.saveAsHTML = false;			//HTMLも保存する？：true,false	jpegExportOpts.verticalScale = 100.0;		//縦方向拡大縮小：0.0 to 776.19	jpegExportOpts.typename = 'WEB';			//Read-only	return jpegExportOpts;					//jpegExportOptsを設定}if (app.documents.length == 0);else main();function log(text){    $.writeln(text);}//debugfunction alertObj(obj){    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);};