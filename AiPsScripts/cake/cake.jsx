#target photoshop/*      cake.jsx        cake for MacPhotoshop    version: 0.4            Author : Takahiro Isihiyama    Mail : ishiyama@sirok.co.jp    */preferences.rulerUnits = Units.PIXELS;app.bringToFront();var _layers = [];function main(){	var document = activeDocument;	var layers = document.layers;	getLayer(layers);  //alert(_layers);	for(var i = 0; i < _layers.length; i++){		var layName = _layers[i].name;     //レイヤー名にjpgが含まれている場合     if(layName.indexOf("jpg") > -1){       //alert("jpg");       //alert(_layers[i])       publish(_layers[i]);     }     if(layName.indexOf("png") > -1){       //alert("png");       publish(_layers[i]);     }	}}//指定したレイヤー以下を表示function displayLayers(obj){  for(var i = 0; i < _layers.length; i++){      _layers[i].visible=false;  }	obj.visible = true;  	if(obj.typename == "LayerSet"){		var i;		var nLayers = obj.layers.length;		for(i=0; i<nLayers; i++){			displayLayers(obj.layers[i]);		}	}}function publish(obj){    	//書き出し準備	//setVisible(document.layers, false);	displayLayers(obj);  	    //レイヤーを選択    //app.activeDocument.activeLayer = _layers[i];          //_layers[i].flatten();    //app.pubLayer.flatten();    //app.activeDocument.activeLayer.rasterize();        //activeDocument.activeLayer = pubLayer;    //activeDocument.activeLayer.rasterize(RasterizeType.LINKEDLAYERS);    //pubLayer.rasterize();    //return 0;};//レイヤー名を取得function getLayer(layers){	var num = layers.length;	for(var i = 0; i < num; i++){		var layer = layers[i];      _layers.push(layer);		if(layer.typename == "LayerSet"){			getLayer(layer.layers);		}	}}function savePNG(path, name, bit){	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.PNG;	exp.interlaced　= false;	if(bit == 8){		exp.PNG8 = true;	}else{		exp.PNG8 = false;	}	fileObj = new File(getFileName(path + name, "png"));		activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);}function saveJPEG(path, name, quality){	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.JPEG;	exp.interlaced　= false;	exp.optimized= false;	exp.quality = quality;	fileObj = new File(getFileName(path + name, "jpg"));		activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);}function getFileName(filename, ext){	var count = 0;	var newFileName = "";	newFileName = filename + "." + ext	var file = new File(newFileName);		while(file.exists != false){		count +=1;		newFileName = filename + count + "." + ext		file = new File(newFileName);	}	return newFileName;}///// VISIBILITY LAYER METHODS /////// レイヤー表示処理function setVisible(obj, bool){	var i=0, l;	switch( obj.typename ) {		//case "LayerSets":		case "Layers":			for( l=obj.length; i<l; ++i ) {				setVisible(obj[i],bool);			}		break;		case "LayerSet":			obj.visible = bool;			for( l=obj.layers.length; i<l; ++i ) {				setVisible(obj.layers[i], bool);			}		break;		default:			obj.visible = bool;			if( bool ) displayParent( obj );		break;	}}function isLayerSet(obj){	return Boolean(obj.typename == "LayerSet");}///// SAVE FILE METHODS /////// 保存処理function savePNG(path, name, bit){	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.PNG;	exp.interlaced　= false;	if(bit == 8){		exp.PNG8 = true;	}else{		exp.PNG8 = false;	}	fileObj = new File( getFileName( path, name, "png") );		activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);}function saveJPEG(path, name, quality){	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.JPEG;	exp.interlaced　= false;	exp.optimized= false;	exp.quality = quality;	fileObj = new File(getFileName(path, name, "jpg"));		activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);}// ファイル名の重複回避処理function getFileName( path, name, ext ){	if( useFolder ) {		path = baseURL + path;	}	else {		name = getValidName(path+name);		path = baseURL;	}	var filename = [ path, name ].join("/");	var count = 0;	var newFileName = "";	newFileName = filename + "." + ext	var file = new File(newFileName);		while(file.exists != false){		count +=1;		newFileName = filename + count + "." + ext		file = new File(newFileName);	}	return newFileName;}//ドキュメントが開かれているかどうか判別if (app.documents.length == 0){	//ドキュメントが開かれていない場合処理なし}else{   main();}//debugfunction alertObj(obj) {    var properties = '';    for (var prop in obj){        properties += prop + "=" + obj[prop] + "\n";    }    alert(properties);}   