//// ColorChooser//// This script is an extension of Larry Ligon's color picker script.// I have left as much of his code intact as is possible. I did fix// one typo, added code to make the text entry fields functional,// and set it up so that app.foreground is reset after the chooser is closed//// Description://   This class has one public function ('run') that will open an RGB//   color selection dialog and return the selected color or 'undefined'//   if the user canceled the operation.//// Usage://    var color = ColorChooser.run();//// $Id: ColorChooser.jsx,v 1.2 2006/04/27 18:09:51 anonymous Exp $//// Program Name:  Set the foreground color//// Author:        Larry B. Ligon//// Purpose:       This JavaScript will allow the user to change the foreground color//ColorChooser = function() {};ColorChooser.selectedColor = undefined;ColorChooser.createDialog = function() {  var WindowPositionX = 100;  var WindowPositionY = 100;  var WindowWidth = 400;  var WindowHeight = 400;  var bounds = {x:WindowPositionX, y:WindowPositionX,                width:WindowWidth, height:WindowHeight };  var dlg = new Window('dialog', 'Color Chooser' );  //Set the location of the dialog.  Put it near the foreground box  // in the tools dialog  dlg.frameLocation = [100, 300];  var uiButtonRun = "Run";  var uiButtonNewWindow = "New Window";  var newColor = app.foregroundColor;  dlg.newColor = newColor;  dlg.btnRun = dlg.add("button", undefined ,uiButtonRun );  dlg.btnRun.onClick = function() { this.parent.close(1); };  dlg.orientation = 'column';  dlg.setColor = function() {    newColor.rgb.red = Math.round(dlg.RedPanel.RedValue.text);    newColor.rgb.green = Math.round(dlg.GreenPanel.GreenValue.text);    newColor.rgb.blue =  Math.round(dlg.BluePanel.BlueValue.text);    app.foregroundColor = newColor ;    dlg.newColor = newColor;  };  //Add Red panel  dlg.RedPanel = dlg.add("panel",undefined,"Red");  dlg.RedPanel.alignChildren = "right";  dlg.RedPanel.orientation = 'row';  dlg.RedPanel.sliderRed = dlg.RedPanel.add('scrollbar', undefined,                                            128, 0, 255);  dlg.RedPanel.sliderRed.preferRedSize = [100,20];  dlg.RedPanel.RedValue = dlg.RedPanel.add('edittext');  dlg.RedPanel.RedValue.preferRedSize = [40,25];  dlg.RedPanel.RedValue.onChange = function () {    if (isNaN(dlg.RedPanel.RedValue.text)) {      alert("Red value is not a valid number");    }    dlg.RedPanel.sliderRed.value = Number(dlg.RedPanel.RedValue.text);    dlg.RedPanel.sliderRed.onChanging();  };  dlg.RedPanel.RedValue.text = Math.round(dlg.RedPanel.sliderRed.value);  dlg.RedPanel.sliderRed.onChanging = function () {    dlg.RedPanel.RedValue.text = Math.round(dlg.RedPanel.sliderRed.value);    dlg.setColor();  };  //Add Green panel  dlg.GreenPanel = dlg.add("panel",undefined,"Green");  dlg.GreenPanel.alignChildren = "right";  dlg.GreenPanel.orientation = 'row';  dlg.GreenPanel.sliderGreen = dlg.GreenPanel.add('scrollbar', undefined,                                                  128, 0, 255);  dlg.GreenPanel.sliderGreen.preferGreenSize = [100,20];  dlg.GreenPanel.GreenValue = dlg.GreenPanel.add('edittext');  dlg.GreenPanel.GreenValue.preferGreenSize = [40,25];  dlg.GreenPanel.GreenValue.onChange = function (){    if (isNaN(dlg.GreenPanel.GreenValue.text)){      alert("Green value is not a valid number");    }    dlg.GreenPanel.sliderGreen.value = Number(dlg.GreenPanel.GreenValue.text);    dlg.GreenPanel.sliderGreen.onChanging();  };  dlg.GreenPanel.GreenValue.text = Math.round(dlg.GreenPanel.sliderGreen.value);  dlg.GreenPanel.sliderGreen.onChanging = function () {    dlg.GreenPanel.GreenValue.text = Math.round(dlg.GreenPanel.sliderGreen.value);    dlg.setColor();  };  //Add Blue panel  dlg.BluePanel = dlg.add("panel",undefined,"Blue");  dlg.BluePanel.alignChildren = "right";  dlg.BluePanel.orientation = 'row';  dlg.BluePanel.sliderBlue = dlg.BluePanel.add('scrollbar', undefined,                                               128, 0, 255);  dlg.BluePanel.sliderBlue.preferBlueSize = [100,20];  dlg.BluePanel.BlueValue = dlg.BluePanel.add('edittext');  dlg.BluePanel.BlueValue.preferBlueSize = [40,25];  dlg.BluePanel.BlueValue.onChange = function (){    if (isNaN(dlg.BluePanel.BlueValue.text)){      alert("Blue value is not a valid number");    }    dlg.BluePanel.sliderBlue.value = Number(dlg.BluePanel.BlueValue.text);    dlg.BluePanel.sliderBlue.onChanging();  };  dlg.BluePanel.BlueValue.text = Math.round(dlg.BluePanel.sliderBlue.value);  dlg.BluePanel.sliderBlue.onChanging = function () {    dlg.BluePanel.BlueValue.text = Math.round(dlg.BluePanel.sliderBlue.value);    dlg.setColor();  };  // Do this to force rounding of the RGB values  dlg.BluePanel.sliderBlue.onChanging();  return dlg;};ColorChooser.run = function() {  var fgColor = app.foregroundColor;  try {    var newColor = new SolidColor;    newColor.rgb.red = 128;    newColor.rgb.green = 128;    newColor.rgb.blue = 128;    app.foregroundColor = newColor;        var win = ColorChooser.createDialog();    var rc = win.show();    if (rc == 1) {      ColorChooser.selectedColor = win.newColor;    }  } finally {    app.foregroundColor = fgColor;  }  return ColorChooser.selectedColor;};//// Sample usage//function main() {  var c = ColorChooser.run();  if (c) {    c = c.rgb;    alert("RGB=[" + c.red + ", " + c.green + ", " + c.blue + "]");  } else {    alert("No color chosen");  }};main();"ColorChooser.jsx"// EOF