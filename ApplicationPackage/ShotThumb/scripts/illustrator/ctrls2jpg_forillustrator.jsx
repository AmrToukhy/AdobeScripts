/*    Ctrls2jpg_forillustrator.jsx        ctrl+sを押すとJpgを吐き出し for Mac Illustrator    version: 1.1        shotThumb対応版    Author : Takahiro Isihiyama    Mail : ishiyama@sirok.co.jp*/#target 'illustrator'// Ctrls2jpg_forillustrator.jsx// ドキュメントが開かれているかどうか判別if (app.documents.length == 0);else main();// mainfunction main(){    var appName = "Ai"; //illustrator   var userName = String(Folder.myDocuments.parent.fsName).slice(7);  var docObj = app.activeDocument; //ファイル情報取得  var docPath = docObj.path; //ファイルパス  var docName = docObj.name; //ファイル名  var date = dateClass(); //現在時刻の取得  var logPath = "/Volumes/Macintosh\ HD/Production";  checkPath(logPath);  //alert(docPath == "");  //if(docPath == "")//保存パスが空白か？    publishJpg(date, logPath, docName, userName, appName);    return log("INF : END main"),0;}//checkPathfunction checkPath(path){  var folderObj = new Folder (path);  //alert(folderObj.exists);  folderObj.create();  if(!folderObj.exists){    flag = folderObj.create();    if(!flag) return alert("ログ保存のための、" + path + " を作成できませんでした。管理者にお問い合わせ下さい。");    //フォルダがない場合にフォルダを作成    log("INF : Make Directory");    alert("ログ保存のため、" + path + " にフォルダを生成しました");  }else log("INF : Already Make Directory");  return 0;}//現在時刻の取得function dateClass(){  dObj = new Date();  while((new Date()).getTime() < dObj.getTime() + 1000*5){ //timeOut5秒      year = dObj.getYear();      year2 = (year < 2000) ? year + 1900 : year;      month = dObj.getMonth() + 1;      day = dObj.getDate();      h = dObj.getHours();      m = dObj.getMinutes();      s = dObj.getSeconds();      dateRaw = year2+'-'+month+'-'+day+' '+h+"h"+m+"m"+s+"s";      break;  }  return dateRaw;}/* fin dateClass *///JPEGfunction publishJpg (date, path, docName, userName, appName) {    folderName = path +"\/log\/view\/";  folderObj = new Folder (folderName);  checkPath(folderName);    //フォルダが存在している場合  fileName = date + "\_" + userName + "\_" + appName + "\_" + docName.slice(0,-3);  filePath = folderName + fileName + ".jpg";  fileObj = new File(filePath);    var exportOptions = getJPEGOptions();  app.activeDocument.exportFile( fileObj, ExportType.JPEG, exportOptions);  return 0;}//jpeg Optionsfunction getJPEGOptions(){	var jpegExportOpts = new ExportOptionsJPEG();	//ExportOptionsJPEGを定義	var matteRGBColor = new RGBColor();			//マットカラーの指定RGB別	matteRGBColor.red = 255; 	matteRGBColor.green = 255; 	matteRGBColor.blue = 255;	jpegExportOpts.antiAliasing = true;			//アンチエイリアス：true,false	jpegExportOpts.artBoardClipping = true;		//アートボードサイズで？：true,false	jpegExportOpts.blurAmount = 0.0;			//ぼかし足し：0.0 to 2.0	jpegExportOpts.horizontalScale = 100.0; 		//横方向拡大縮小：100.0=100%	jpegExportOpts.matte = true;				//マット有り無し：true,false	jpegExportOpts.matteColor = matteRGBColor;	//マットの色：RGBColorで指定		jpegExportOpts.optimization = true;			//最適化する？：true,false	jpegExportOpts.qualitySetting = 100;			//画質は？：0 to 100	jpegExportOpts.saveAsHTML = false;			//HTMLも保存する？：true,false	jpegExportOpts.verticalScale = 100.0;		//縦方向拡大縮小：0.0 to 776.19	jpegExportOpts.typename = 'WEB';			//Read-only	return jpegExportOpts;					//jpegExportOptsを設定}//cosoleLogfunction log(text){  //$.writeln(text);  return;};//debugfunction alertObj(obj) {  var properties = '';  for (var prop in obj){      properties += prop + "=" + obj[prop] + "\n";  }  return alert(properties);}   